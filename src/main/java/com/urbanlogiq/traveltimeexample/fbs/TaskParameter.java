package com.urbanlogiq.traveltimeexample.fbs;// automatically generated by the FlatBuffers compiler, do not modify

import java.nio.*;
import java.lang.*;

import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class TaskParameter extends Table {
  public static TaskParameter getRootAsTaskParameter(ByteBuffer _bb) { return getRootAsTaskParameter(_bb, new TaskParameter()); }
  public static TaskParameter getRootAsTaskParameter(ByteBuffer _bb, TaskParameter obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; vtable_start = bb_pos - bb.getInt(bb_pos); vtable_size = bb.getShort(vtable_start); }
  public TaskParameter __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public String key() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer keyAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer keyInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  public int value(int j) { int o = __offset(6); return o != 0 ? bb.get(__vector(o) + j * 1) & 0xFF : 0; }
  public int valueLength() { int o = __offset(6); return o != 0 ? __vector_len(o) : 0; }
  public ByteBuffer valueAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer valueInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }
  public ObjectId obj() { return obj(new ObjectId()); }
  public ObjectId obj(ObjectId obj) { int o = __offset(8); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }
  public long flags() { int o = __offset(10); return o != 0 ? bb.getLong(o + bb_pos) : 0L; }

  public static int createTaskParameter(FlatBufferBuilder builder,
      int keyOffset,
      int valueOffset,
      int objOffset,
      long flags) {
    builder.startObject(4);
    TaskParameter.addFlags(builder, flags);
    TaskParameter.addObj(builder, objOffset);
    TaskParameter.addValue(builder, valueOffset);
    TaskParameter.addKey(builder, keyOffset);
    return TaskParameter.endTaskParameter(builder);
  }

  public static void startTaskParameter(FlatBufferBuilder builder) { builder.startObject(4); }
  public static void addKey(FlatBufferBuilder builder, int keyOffset) { builder.addOffset(0, keyOffset, 0); }
  public static void addValue(FlatBufferBuilder builder, int valueOffset) { builder.addOffset(1, valueOffset, 0); }
  public static int createValueVector(FlatBufferBuilder builder, byte[] data) { builder.startVector(1, data.length, 1); for (int i = data.length - 1; i >= 0; i--) builder.addByte(data[i]); return builder.endVector(); }
  public static void startValueVector(FlatBufferBuilder builder, int numElems) { builder.startVector(1, numElems, 1); }
  public static void addObj(FlatBufferBuilder builder, int objOffset) { builder.addOffset(2, objOffset, 0); }
  public static void addFlags(FlatBufferBuilder builder, long flags) { builder.addLong(3, flags, 0L); }
  public static int endTaskParameter(FlatBufferBuilder builder) {
    int o = builder.endObject();
    builder.required(o, 4);  // key
    return o;
  }
}

