package com.urbanlogiq.traveltimeexample.fbs;// automatically generated by the FlatBuffers compiler, do not modify

import java.nio.*;
import java.lang.*;

import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class RunSpec extends Table {
  public static RunSpec getRootAsRunSpec(ByteBuffer _bb) { return getRootAsRunSpec(_bb, new RunSpec()); }
  public static RunSpec getRootAsRunSpec(ByteBuffer _bb, RunSpec obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; vtable_start = bb_pos - bb.getInt(bb_pos); vtable_size = bb.getShort(vtable_start); }
  public RunSpec __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public boolean discard() { int o = __offset(4); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  public ObjectId schematic() { return schematic(new ObjectId()); }
  public ObjectId schematic(ObjectId obj) { int o = __offset(6); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }
  public ParamIndices paramIndices(int j) { return paramIndices(new ParamIndices(), j); }
  public ParamIndices paramIndices(ParamIndices obj, int j) { int o = __offset(8); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int paramIndicesLength() { int o = __offset(8); return o != 0 ? __vector_len(o) : 0; }
  public TaskParameter params(int j) { return params(new TaskParameter(), j); }
  public TaskParameter params(TaskParameter obj, int j) { int o = __offset(10); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int paramsLength() { int o = __offset(10); return o != 0 ? __vector_len(o) : 0; }

  public static int createRunSpec(FlatBufferBuilder builder,
      boolean discard,
      int schematicOffset,
      int param_indicesOffset,
      int paramsOffset) {
    builder.startObject(4);
    RunSpec.addParams(builder, paramsOffset);
    RunSpec.addParamIndices(builder, param_indicesOffset);
    RunSpec.addSchematic(builder, schematicOffset);
    RunSpec.addDiscard(builder, discard);
    return RunSpec.endRunSpec(builder);
  }

  public static void startRunSpec(FlatBufferBuilder builder) { builder.startObject(4); }
  public static void addDiscard(FlatBufferBuilder builder, boolean discard) { builder.addBoolean(0, discard, false); }
  public static void addSchematic(FlatBufferBuilder builder, int schematicOffset) { builder.addOffset(1, schematicOffset, 0); }
  public static void addParamIndices(FlatBufferBuilder builder, int paramIndicesOffset) { builder.addOffset(2, paramIndicesOffset, 0); }
  public static int createParamIndicesVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startParamIndicesVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addParams(FlatBufferBuilder builder, int paramsOffset) { builder.addOffset(3, paramsOffset, 0); }
  public static int createParamsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startParamsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static int endRunSpec(FlatBufferBuilder builder) {
    int o = builder.endObject();
    builder.required(o, 6);  // schematic
    builder.required(o, 8);  // param_indices
    builder.required(o, 10);  // params
    return o;
  }
}

